generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  firstName     String?
  lastName      String?
  userImage     String
  currentSongId String?        @unique
  clerkId       String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  myPlaylists   Playlist[]     @relation("UserPlaylists") // Correct relation
  likedSongs    Song[]         @relation("UserLikedSongs")
  playlistUsers PlaylistUser[] @relation("UserPlaylistUser") // Correct reverse relation
  queuedSongs   Song[]         @relation("UserQueuedSongs") // New relation for queued songs
}

model Playlist {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  playlistId    String         @unique(map: "Playlist_playlistId_key")
  title         String
  description   String?
  year          Int?
  artist        String?
  type          String
  language      String?
  link          String
  imageUrl      String
  users         User[]         @relation("UserPlaylists") // Correct relation
  songs         Song[]         @relation("PlaylistSongs")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  playlistUsers PlaylistUser[] @relation("PlaylistUserRelation") // Correct reverse relation
}

model Song {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  songId       String    @unique(map: "Song_songId_key")
  userId       String?   @db.Uuid
  likedByUsers User[]    @relation("UserLikedSongs")
  playlistId   String?   @db.Uuid
  playlist     Playlist? @relation("PlaylistSongs", fields: [playlistId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  queuedUserId String?   @db.Uuid // Foreign key for the new queuedSongs relation
  queuedUser   User?     @relation("UserQueuedSongs", fields: [queuedUserId], references: [id])
}

model PlaylistUser {
  userId     String   @db.Uuid
  playlistId String   @db.Uuid
  user       User     @relation("UserPlaylistUser", fields: [userId], references: [id]) // Reverse relation
  playlist   Playlist @relation("PlaylistUserRelation", fields: [playlistId], references: [id])

  @@id([userId, playlistId]) // Composite primary key for the join table
}
